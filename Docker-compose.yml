version: "3.8"

services:
    # PostgreSQL сервис
    postgres:
        image: postgres:17.4-alpine
        container_name: project_postgres
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_NAME}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app-network

    # Redis сервис
    redis:
        image: redis:7.4.2-alpine
        container_name: project_redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
        networks:
            - app-network

    # ASP.NET бэкенд сервис
    backend:
        build:
            context: ./Backend
            dockerfile: Dockerfile
        container_name: project_backend
        env_file: # Добавляем чтение .env файла и сюда
            - .env
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${DB_NAME:-appdb};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-postgres}
            - Redis__ConnectionString=redis
            - Minio__Endpoint=localhost:9000
            # Имя пользователя MinIO (из .env)
            - Minio__AccessKey=${MINIO_USER:-minioadmin}
            # Пароль MinIO (из .env)
            - Minio__SecretKey=${MINIO_PASSWORD:-minioadmin}
            # Указываем, что не используем SSL для внутренней коммуникации
            - Minio__UseSSL=false
            # Имя бакета по умолчанию (можно тоже вынести в .env)
            - Minio__BucketName=${MINIO_DEFAULT_BUCKET:-my-app-bucket}
        networks:
            - app-network
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            minio: # Добавляем зависимость от MinIO (НОВОЕ)
                condition: service_healthy

    # React фронтенд сервис
    frontend:
        build:
            context: ./Frontend
            dockerfile: Dockerfile
        container_name: project_frontend
        ports:
            - "80:80"
        environment:
            - REACT_APP_API_URL=/api
        networks:
            - app-network
        depends_on:
            - backend

    minio:
        image: minio/minio:latest # Используем официальный образ MinIO
        container_name: project_minio
        # Запускаем сервер MinIO, указываем путь к данным и адрес консоли
        command: server /data --console-address ":9001"
        env_file:
            - .env # Читаем переменные из .env
        environment:
            # Учетные данные для доступа к MinIO (из .env файла)
            MINIO_ROOT_USER: ${MINIO_USER:-minioadmin} # Задает пользователя по умолчанию, если в .env нет
            MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minioadmin} # Задает пароль по умолчанию, если в .env нет
            MINIO_DEFAULT_BUCKET: ${MINIO_DEFAULT_BUCKET:-my-app-bucket}
        ports:
            # Порт для API MinIO (S3-совместимый)
            - "9000:9000"
            # Порт для веб-консоли MinIO
            - "9001:9001"
        volumes:
            # Связываем том для хранения данных MinIO
            - minio_data:/data
            - ./init-minio.sh:/docker-entrypoint-init.d/init-minio.sh
        networks:
            - app-network
        healthcheck:
            # Проверка доступности MinIO API
            test:
                ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live"]
            interval: 10s
            timeout: 5s
            retries: 5

networks:
    app-network:
        driver: bridge

# Объявляем тома и сети
volumes:
    postgres_data:
    redis_data:
    minio_data:
